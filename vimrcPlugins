" ------------PLUGINS-------------------------

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()


" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'mbbill/undotree'
nnoremap <F5> :UndotreeToggle<CR>
if has("persistent_undo")
   let target_path = expand('~/.undodir')

    " create the directory and any parent directories
    " if the location does not exist.
    if !isdirectory(target_path)
        call mkdir(target_path, "p", 0700)
    endif

    let &undodir=target_path
    set undofile
endif


" PS: LSP = Language Server Protocol

" Makes the settings of LSP easier (a lot, really)
Plugin 'mattn/vim-lsp-settings'


" The plugin that will handle the LSP.
Plugin 'prabirshrestha/vim-lsp'
function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
    
    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" Enabling fold by LSP
set foldmethod=expr
  \ foldexpr=lsp#ui#vim#folding#foldexpr()
  \ foldtext=lsp#ui#vim#folding#foldtext()


" Async complete, the plugin 
Plugin 'prabirshrestha/asyncomplete.vim'

" Maps to async complete
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

" allow modifying the completeopt variable, or it will
" be overridden all the time
let g:asyncomplete_auto_completeopt = 0

set completeopt=menuone,noinsert,noselect,preview


" The plugin that will work with the LSP
Plugin 'prabirshrestha/asyncomplete-lsp.vim'

" Snippets that work with lsp
Plugin 'hrsh7th/vim-vsnip'
Plugin 'hrsh7th/vim-vsnip-integ'
" Snippets that are just usefull
Plugin 'rafamadriz/friendly-snippets'


" SETTINGS TO SNIPPETS
" NOTE: You can use other key to expand snippet.

" Expand
imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'

" Expand or jump
imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'

" Jump forward or backward
imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'

" Select or cut text to use as $TM_SELECTED_TEXT in the next snippet.
" See https://github.com/hrsh7th/vim-vsnip/pull/50
nmap        s   <Plug>(vsnip-select-text)
xmap        s   <Plug>(vsnip-select-text)
nmap        S   <Plug>(vsnip-cut-text)
xmap        S   <Plug>(vsnip-cut-text)

" Plugin to write good latex pdf files
"
" Comments: If the plugin can't find main file, press :set b:vimtex_main <localLeader>lX and then 
Plugin 'lervag/vimtex'
" Viewer options: One may configure the viewer either by specifying a built-in
" viewer method:
let g:vimtex_view_enabled = 0
"let g:vimtex_view_method = 'zathura'
" Verificar viewer configuration na linha 5984.

" VimTeX uses latexmk as the default compiler backend. If you use it, which is
" strongly recommended, you probably don't need to configure anything. If you
" want another compiler backend, you can change it as follows. The list of
" supported backends and further explanation is provided in the documentation,
" see ":help vimtex-compiler".
let g:vimtex_compiler_method = 'latexmk'

" Para fazer com que o inkscape consiga ser chamado e criar as imagens a
" partir do svg.
" " Opções default provenientes do manual também estão presentes.
let g:vimtex_compiler_latexmk = {
	\ 'aux_dir' : './aux/',
	\ 'callback' : 1,
	\ 'continuous' : 1,
	\ 'executable' : 'latexmk',
	\ 'hooks' : [],
	\ 'options' : [
	\   '-shell-escape',
	\   '-verbose',
	\   '-file-line-error',
	\   '-synctex=1',
	\   '-interaction=nonstopmode',
	\ ],
	\}
" Opção retirada por hora.
"	\ 'out_dir' : './out/',

" Opções default provindas da documentação.
" let g:vimtex_compiler_latexmk_engines = {
" 	\ '_'                : '-pdf',
" 	\ 'pdfdvi'           : '-pdfdvi',
" 	\ 'pdfps'            : '-pdfps',
" 	\ 'pdflatex'         : '-pdf',
" 	\ 'luatex'           : '-lualatex',
" 	\ 'lualatex'         : '-lualatex',
" 	\ 'xelatex'          : '-xelatex',
" 	\ 'context (pdftex)' : '-pdf -pdflatex=texexec',
" 	\ 'context (luatex)' : '-pdf -pdflatex=context',
" 	\ 'context (xetex)'  : '-pdf -pdflatex=''texexec --xtx''',
" 	\}


" Verificar os atalhos no modo de inserção definidos na linha 188 do: 
" ~/.vim/bundle/vimtex/autoload/vimtex/options.vim`
let vimtex_imaps_leader = "´"

" Most VimTeX mappings rely on localleader and this can be changed with the
" following line. The default is usually fine and is the symbol "\".
let maplocalleader = ","
" De vez em quando o quickfix do latex me enche. 
"let g:vimtex_quickfix_enabled = 0
" A janela do wuickfix não abre automaticamente nunca
"let g:vimtex_quickfix_mode = 0
let g:vimtex_quickfix_mode = 1

let g:tex_conceal = ""
let g:vimtex_syntax_conceal_disable=1

Plugin 'mateusbraga/vim-spell-pt-br'
set spelllang=pt_br

Plugin 'liuchengxu/vim-which-key'
set timeoutlen=200
nnoremap <silent> <leader> 	:<c-u>WhichKey '<leader>'<CR>
nnoremap <silent> <localleader>	:<c-u>WhichKey ','<CR>
nnoremap <silent> <Space>	:<c-u>WhichKey '<Space>'<CR>
nnoremap <silent> ;		:<c-u>WhichKey ';'<CR>
nnoremap <silent> .		:<c-u>WhichKey '.'<CR>
nnoremap <silent> ,		:<c-u>WhichKey ','<CR>

let g:which_key_map = {}
let g:which_key_map['~'] = {
      \ 'name' : '+windows' ,
      \ 'w' : ['<C-W>w'     , 'other-window']          ,
      \ 'd' : ['<C-W>c'     , 'delete-window']         ,
      \ '-' : ['<C-W>s'     , 'split-window-below']    ,
      \ '|' : ['<C-W>v'     , 'split-window-right']    ,
      \ '2' : ['<C-W>v'     , 'layout-double-columns'] ,
      \ 'h' : ['<C-W>h'     , 'window-left']           ,
      \ 'j' : ['<C-W>j'     , 'window-below']          ,
      \ 'l' : ['<C-W>l'     , 'window-right']          ,
      \ 'k' : ['<C-W>k'     , 'window-up']             ,
      \ 'H' : ['<C-W>5<'    , 'expand-window-left']    ,
      \ 'J' : [':resize +5'  , 'expand-window-below']   ,
      \ 'L' : ['<C-W>5>'    , 'expand-window-right']   ,
      \ 'K' : [':resize -5'  , 'expand-window-up']      ,
      \ '=' : ['<C-W>='     , 'balance-window']        ,
      \ 's' : ['<C-W>s'     , 'split-window-below']    ,
      \ 'v' : ['<C-W>v'     , 'split-window-below']    ,
      \ '?' : ['Windows'    , 'fzf-window']            ,
      \ }


call vundle#end()

call which_key#register('<Space>', "g:which_key_map")
